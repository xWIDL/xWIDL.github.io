<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xWIDL</title>
    <description>xWIDL is the eXtended WebIDL to support deep and modular API misuse checking.
</description>
    <link>http://xWIDL.github.io/</link>
    <atom:link href="http://xWIDL.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 21 Dec 2016 20:06:43 +0800</pubDate>
    <lastBuildDate>Wed, 21 Dec 2016 20:06:43 +0800</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>项目进展</title>
        <description>&lt;p&gt;项目进展不足，拖延有余。&lt;/p&gt;

&lt;p&gt;目前我已经了解了 Scala 的基本用法和 SAFE 2.0 的源代码结构。总体来说 generality 还是比较高的。&lt;/p&gt;

&lt;h2 id=&quot;一个有趣的问题&quot;&gt;一个有趣的问题&lt;/h2&gt;
&lt;p&gt;safe 如果不手动通过选项指定 context-sensitivity，则 k （CFA 的 call limit）默认为 0。也就是说，每个 call-site 都会在函数 exit edge 的 propagation 目标里面。简单来说，就是每次分析一个调用，以前的调用点的调用完成后 state 都会受到影响。这样不仅仅不精确，而且效率非常差（quaradic）。比如下面的程序：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;分别为 &lt;code class=&quot;highlighter-rouge&quot;&gt;k = 0&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;k = 1&lt;/code&gt; 时的费时差距极大。&lt;/p&gt;

&lt;p&gt;当 &lt;code class=&quot;highlighter-rouge&quot;&gt;k = 1&lt;/code&gt; 时，进入函数时 call trace 也是状态的一部分，所以在结束时可以“返回”正确的调用点 – 也就是说返回时的 propagation 只会影响一个 callsite 而不是所有的。&lt;/p&gt;

&lt;h2 id=&quot;safe-源码重点分析&quot;&gt;SAFE 源码重点分析&lt;/h2&gt;

&lt;p&gt;简而言之，我需要知道 “call a function” 这个 AST expression node 被分析器遇到时，所引发的动作（control），以及我能得到的分析器中的数据类型（data）。&lt;/p&gt;

&lt;p&gt;在 SAFE 2.0 中，这不显然。&lt;/p&gt;

&lt;p&gt;首先我们从 &lt;code class=&quot;highlighter-rouge&quot;&gt;Safe.scala&lt;/code&gt; 看起 – 这个 object 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; 函数中按照功能选择对应的模块，我们关心的 analyze 功能，所以看 &lt;code class=&quot;highlighter-rouge&quot;&gt;Analyze.scala&lt;/code&gt; 的部分。&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Analyze.apply&lt;/code&gt; 中，一系列初始化动作被触发：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;register all kinds of configurations&lt;/li&gt;
  &lt;li&gt;initialize (abstract) state from CFG&lt;/li&gt;
  &lt;li&gt;handle special modes
    &lt;ul&gt;
      &lt;li&gt;Test: &lt;code class=&quot;highlighter-rouge&quot;&gt;addTest&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;DOM modeling: &lt;code class=&quot;highlighter-rouge&quot;&gt;addDOM&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Call context initialization&lt;/li&gt;
  &lt;li&gt;Set up the global entry, add it into the initialized worklist&lt;/li&gt;
  &lt;li&gt;Initialize semantics (which is approx. “transfer functions”) with CFG&lt;/li&gt;
  &lt;li&gt;Start up fix-point computing (it looks like just a naïve chaotic iteration, without much heuristics involved)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们关系的是两部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;DOM modeling 是怎么做的（DOM 相对于 JS 来说是额外的环境信息，xWIDL 相当于 generalize 这种运行环境）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;compute&lt;/code&gt; 中函数调用时怎么处理的&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;from-dom-modeling-to-built-in-functions&quot;&gt;From DOM modeling to Built-in functions&lt;/h3&gt;

&lt;p&gt;打开这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;dom.Document&lt;/code&gt;，你会发现一个大写的 TODO，然后就没了。但是返回上一层源码目录 &lt;code class=&quot;highlighter-rouge&quot;&gt;models&lt;/code&gt;，这里有所有的 “modelling” 部分，包括对 JS primitive values 的 model，对 object 的 model, 对 function 的 model 等等。在往上翻一层，另一个 module 叫做 &lt;code class=&quot;highlighter-rouge&quot;&gt;builtin&lt;/code&gt;，里面是对&lt;strong&gt;大量 JS 内置函数行为的 hard-coding&lt;/strong&gt;，这正是我们针对的目标。&lt;/p&gt;

&lt;p&gt;我们来看下 &lt;code class=&quot;highlighter-rouge&quot;&gt;FuncModel.scala&lt;/code&gt;，这里记载了初始化 heap 并最后 &lt;code class=&quot;highlighter-rouge&quot;&gt;newFunctionObject&lt;/code&gt; 的过程。但是这似乎并不能处理 API 的问题 – 因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;fid&lt;/code&gt; 是从 CFG 里来的！（&lt;code class=&quot;highlighter-rouge&quot;&gt;val func = code.getCFGFunc(cg, name)&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;重新看 &lt;code class=&quot;highlighter-rouge&quot;&gt;Initialize&lt;/code&gt; 中初始化的过程，会有 &lt;code class=&quot;highlighter-rouge&quot;&gt;BuiltinGlobal.initHeap(initHeap, cfg)&lt;/code&gt; 这一句，其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;BuiltinGlobal&lt;/code&gt; 作为一个 abstract object，其 properties（数据或函数成员）已经写死。&lt;/p&gt;

&lt;p&gt;所以，&lt;code class=&quot;highlighter-rouge&quot;&gt;BuiltIn&lt;/code&gt; 中指定函数行为的方式是通过初始化 &lt;code class=&quot;highlighter-rouge&quot;&gt;BasicCode&lt;/code&gt; 中的一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;(AbaValue, AbsState) -&amp;gt; (AbsState, AbsState, AbsValue)&lt;/code&gt; 的闭包实现。我们只需要将这个 PureCode 改成自己想要的即可。&lt;/p&gt;

&lt;h3 id=&quot;fix-point-computation&quot;&gt;Fix-point computation&lt;/h3&gt;

&lt;p&gt;数据流分析的核心是对 state 的抽象 – 一个 CFG node 的 state 可以是所有执行路径经过这个节点时的 state 综合（summary），也可以是某个 call context 上所有 intra-procedural 的路径综合，也可以是对分支敏感的路径综合。同时，这种 summarization 一般来说是一种 efficiency 和 precision 的 trade-off，为了提升效率（节省存储状态的空间，加快状态合并的计算），也为了保证终止性，一般会将 state 抽象成一个 finite-height semi-lattice 模型，一个 trivial 的例子是整数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    ___ Top ___
  /      |      \
 /       |       \
Pos     Zero    Neg
 \       |       /
  \____  |  ____/
        Bot
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一个不怎么 trivial 的例子是 heap。&lt;/p&gt;

&lt;p&gt;回到正题，&lt;code class=&quot;highlighter-rouge&quot;&gt;Fixpoint.compute&lt;/code&gt; 中的核心一步在于 &lt;code class=&quot;highlighter-rouge&quot;&gt;semantics.C(cp, st)&lt;/code&gt;，这一步相当于一步计算，返回了之后的新状态（一般来说这一步叫做 transfer functions，但是 SAFE 似乎用 OOP 包装了一下所以 function 不是很明显）。&lt;/p&gt;

&lt;p&gt;进入 &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; 中，可以找到 &lt;code class=&quot;highlighter-rouge&quot;&gt;call: Call =&amp;gt; CI(cp, call.callInst, st, AbsState.Bot)&lt;/code&gt; ，于是便找到了处理函数调用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;CI&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;CI&lt;/code&gt; 比较复杂，要为每一个这个名字可能指向的函数（论 points-to analysis 的重要性）加入新的 call edge。&lt;/p&gt;

&lt;p&gt;这里我们知道关键在于 &lt;code class=&quot;highlighter-rouge&quot;&gt;getFunc&lt;/code&gt; 是怎么工作的。每个函数，不管是 built-in 还是 user space，都可以看作一个 callable-objects，所以通过名字得到 locset 之后，还要进一步通过 abstract heap 映射得到 abstract object, 但是这个 object 是抽象的 – 又可以代表很多 function，所以进一步对每个 &lt;code class=&quot;highlighter-rouge&quot;&gt;fid&lt;/code&gt; 去分析。&lt;/p&gt;

&lt;h2 id=&quot;目前修改的部分&quot;&gt;目前修改的部分&lt;/h2&gt;

&lt;p&gt;目前已经加入的部分是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Interface&lt;/code&gt; 和相关的 xWIDL 抽象语法树，不完全，但每个节点都实现了输出成 Dafny 的对应实现的翻译部分&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ObjBuilder&lt;/code&gt; – 通过接口定义检查函数调用情况
    &lt;ul&gt;
      &lt;li&gt;已经可以检查类型和参数数目的问题&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XWIDLCode&lt;/code&gt; – 类似 &lt;code class=&quot;highlighter-rouge&quot;&gt;PureCode&lt;/code&gt;，但是包装的是基于接口定义检查函数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;askDafny&lt;/code&gt; – 与 Dafny 的通信模块&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PPrint&lt;/code&gt; – 根据 &lt;em&gt;A Prettier Printer&lt;/em&gt; 在 Scala 中重新实现的 pretty printing combinator 库&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一些简单的函数，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.abs&lt;/code&gt;，已经可以生成靠谱的 Dafny 代码。&lt;/p&gt;

&lt;p&gt;下一步计划：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Variadic function 如何处理&lt;/li&gt;
  &lt;li&gt;如何输出有用的 type check 信息&lt;/li&gt;
  &lt;li&gt;xWIDL 的其他功能&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 21 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://xWIDL.github.io/2016/12/21/progress.html</link>
        <guid isPermaLink="true">http://xWIDL.github.io/2016/12/21/progress.html</guid>
        
        
      </item>
    
      <item>
        <title>Technical Report</title>
        <description>&lt;h2 id=&quot;xwidl-engine-architecture&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xwidl-engine&lt;/code&gt; Architecture&lt;/h2&gt;

&lt;h2 id=&quot;client-server-interface--protocol&quot;&gt;Client-Server Interface &amp;amp; Protocol&lt;/h2&gt;

&lt;h3 id=&quot;q--a&quot;&gt;Q &amp;amp; A&lt;/h3&gt;

&lt;h4 id=&quot;why-there-is-a-separate-int-type-why-undefined-is-missing&quot;&gt;Why there is a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; type? Why &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; is missing?&lt;/h4&gt;

&lt;p&gt;For JS, it is correct that primitive types include &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; but at the same time doesn’t differentiate integer from float point number.&lt;/p&gt;

&lt;p&gt;However, I assume a preprocessing step before sending the value from client to the checker. Why we need to do that? First, WebIDL differentiate integer from float point number, so we can only get precise information to do this by asking from client side. Also, if anything is &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, it shouldn’t be sent to checker at all – it must be &lt;em&gt;erroneous&lt;/em&gt; (evidence?)&lt;/p&gt;

&lt;h2 id=&quot;tajs-instantiation&quot;&gt;TAJS instantiation&lt;/h2&gt;

</description>
        <pubDate>Fri, 11 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://xWIDL.github.io/2016/11/11/tr.html</link>
        <guid isPermaLink="true">http://xWIDL.github.io/2016/11/11/tr.html</guid>
        
        
      </item>
    
      <item>
        <title>Roadmap</title>
        <description>&lt;p&gt;The roadmap for this project has two directions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Refine the extra annotations and promote its use&lt;/li&gt;
  &lt;li&gt;Rewrite the core checker module with Scala&lt;/li&gt;
  &lt;li&gt;Integrate it with more JS analyzers, including SAFE 2.0 and TAJS&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 11 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://xWIDL.github.io/2016/11/11/roadmap.html</link>
        <guid isPermaLink="true">http://xWIDL.github.io/2016/11/11/roadmap.html</guid>
        
        
      </item>
    
      <item>
        <title>Resources</title>
        <description>&lt;p&gt;Here are some basic information about our project – xWIDL.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Paper(&lt;a href=&quot;http://dl.acm.org/citation.cfm?doid=2984043.2998545&quot;&gt;dl.acm.org&lt;/a&gt;, &lt;a href=&quot;https://zhenzhang.me/papers/xwidl.pdf&quot;&gt;pre-print&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xwidl&quot;&gt;Source code&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/xWIDL/xwidl-engine&quot;&gt;xWIDL core module&lt;/a&gt; in Haskell&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/xWIDL/TAJS&quot;&gt;Customized TAJS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/xWIDL/js-bridge&quot;&gt;Client-Server Interface Definitions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/xWIDL/dafny-bridge&quot;&gt;Dafny Interface&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhenzhang.me/assets/xwidl-poster.pdf&quot;&gt;Poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 27 Oct 2016 19:52:36 +0800</pubDate>
        <link>http://xWIDL.github.io/intro/2016/10/27/info.html</link>
        <guid isPermaLink="true">http://xWIDL.github.io/intro/2016/10/27/info.html</guid>
        
        
        <category>intro</category>
        
      </item>
    
  </channel>
</rss>
